{
  "literals": [
    {
      "type": "int",
      "id": "isTrue",
      "value": "1"
    },
    {
      "type": "int",
      "id": "isFalse",
      "value": "0"
    },
    {
      "type": "text",
      "id": "NOT_IN_CONTRACT",
      "value": "NOT COVERED IN CONTRACT"
    },
    {
      "type": "text",
      "id": "EXCLUDED_STATE",
      "value": "STATE"
    },
    {
      "type": "text",
      "id": "HH_AUTH",
      "value": "HH_AUTH"
    },
    {
      "type": "text",
      "id": "EXCL_HH_AUTH",
      "value": "HH AUTH"
    },
    {
      "type": "text",
      "id": "EXCLUDED_COUNTY",
      "value": "COUNTY"
    },
    {
      "type": "text",
      "id": "EXCLUDED_TIN",
      "value": "TIN"
    },
    {
      "type": "text",
      "id": "EXCLUDED_TIN_STATE",
      "value": "TIN/STATE"
    },
    {
      "type": "text",
      "id": "EXCL_MER_COM",
      "value": "MERGED COMPONENTS"
    },
    {
      "type": "text",
      "id": "EXCL_AMT_PAID",
      "value": "MERGED \"MARKET\" CHARGE BACK"
    },
    {
      "type": "text",
      "id": "EXCLUDED_GROUPID",
      "value": "GROUPID"
    },
    {
      "type": "text",
      "id": "EXCLUDED_MODALITY",
      "value": "MODALITY"
    }
  ],
  "resources": [
    {
      "type": "resource",
      "id": "medicareRateObjTC1",
      "value": "_0:medicareRateObjTC1"
    },
    {
      "type": "resource",
      "id": "medicareRateObjTC2",
      "value": "_0:medicareRateObjTC2"
    },
    {
      "type": "resource",
      "id": "None",
      "symbol": "null",
      "value": null
    },
    {
      "type": "resource",
      "id": "uuid",
      "symbol": "create_uuid_resource()",
      "value": null
    },
    {
      "type": "resource",
      "id": "acme:key",
      "value": "acme:key"
    },
    {
      "type": "resource",
      "id": "acme:lookup_table",
      "value": "acme:key"
    },
    {
      "type": "volatile_resource",
      "id": "medicareRateObj261",
      "value": "medicareRateObj261"
    },
    {
      "type": "volatile_resource",
      "id": "medicareRateObj262",
      "value": "medicareRateObj262"
    },
    {
      "id": "acme:ProcedureLookup",
      "type": "resource",
      "value": "acme:ProcedureLookup"
    },
    {
      "id": "cPROC_RID",
      "type": "resource",
      "value": "PROC_RID"
    },
    {
      "id": "cPROC_MID",
      "type": "resource",
      "value": "PROC_MID"
    },
    {
      "id": "cPROC_DESC",
      "type": "resource",
      "value": "PROC_DESC"
    },
    {
      "id": "MSK_DRG_TRIGGER",
      "type": "resource",
      "value": "MSK_DRG_TRIGGER"
    },
    {
      "id": "cMSK_AREA_DRG_TRIGGER_ONLY",
      "type": "resource",
      "value": "MSK_AREA_DRG_TRIGGER_ONLY"
    },
    {
      "id": "cMSK_TAG",
      "type": "resource",
      "value": "MSK_TAG"
    },
    {
      "id": "cTRIGGER_TAG_DRG_ONLY",
      "type": "resource",
      "value": "TRIGGER_TAG_DRG_ONLY"
    },
    {
      "id": "cDRG",
      "type": "resource",
      "value": "DRG"
    },
    {
      "id": "cOVERLAP",
      "type": "resource",
      "value": "OVERLAP"
    },
    {
      "id": "cUSE_ANESTHESIA",
      "type": "resource",
      "value": "USE_ANESTHESIA"
    }
  ],
  "lookup_tables": [
    {
      "name": "acme:ProcedureLookup",
      "table": "usi__cm_proc_codes",
      "key": [
        "PROC_CODE"
      ],
      "columns": [
        "PROC_RID",
        "PROC_MID",
        "PROC_DESC"
      ],
      "resources": [
        "cPROC_RID",
        "cPROC_MID",
        "cPROC_DESC"
      ]
    },
    {
      "name": "MSK_DRG_TRIGGER",
      "table": "usi__msk_trigger_drg_codes",
      "key": [
        "DRG"
      ],
      "columns": [
        "MSK_AREA_DRG_TRIGGER_ONLY",
        "MSK_TAG",
        "TRIGGER_TAG_DRG_ONLY",
        "DRG",
        "OVERLAP",
        "USE_ANESTHESIA"
      ],
      "resources": [
        "cMSK_AREA_DRG_TRIGGER_ONLY",
        "cMSK_TAG",
        "cTRIGGER_TAG_DRG_ONLY",
        "cDRG",
        "cOVERLAP",
        "cUSE_ANESTHESIA"
      ]
    }
  ],
  "jet_rules": [
    {
      "name": "Rule1",
      "properties": {
        "s": "+100",
        "o": "false",
        "tag": "\"USI\""
      },
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:Claim"
            }
          ],
          "normalizedLabel": "(?x1 rdf:type acme:Claim)",
          "label": "(?clm01 rdf:type acme:Claim)"
        },
        {
          "type": "antecedent",
          "isNot": true,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:hasDRG"
            },
            {
              "type": "var",
              "id": "?x2",
              "label": "?drg"
            }
          ],
          "filter": {
            "type": "binary",
            "lhs": {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x1",
                "label": "?clm01"
              },
              "op": "+",
              "rhs": {
                "type": "var",
                "id": "?x2",
                "label": "?drg"
              }
            },
            "op": "+",
            "rhs": {
              "type": "int",
              "value": "1"
            }
          },
          "normalizedLabel": "not(?x1 acme:hasDRG ?x2).[(?x1 + ?x2) + int(1)]",
          "label": "not(?clm01 acme:hasDRG ?drg).[(?clm01 + ?drg) + int(1)]"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:SpecialClaim"
            }
          ],
          "normalizedLabel": "(?x1 rdf:type acme:SpecialClaim)",
          "label": "(?clm01 rdf:type acme:SpecialClaim)"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "xyz"
            },
            {
              "type": "var",
              "id": "?x2",
              "label": "?drg"
            }
          ],
          "normalizedLabel": "(?x1 xyz ?x2)",
          "label": "(?clm01 xyz ?drg)"
        }
      ],
      "normalizedLabel": "[Rule1, s=+100, o=false, tag=\"USI\"]:(?x1 rdf:type acme:Claim).not(?x1 acme:hasDRG ?x2).[(?x1 + ?x2) + int(1)] -> (?x1 rdf:type acme:SpecialClaim).(?x1 xyz ?x2);",
      "label": "[Rule1, s=+100, o=false, tag=\"USI\"]:(?clm01 rdf:type acme:Claim).not(?clm01 acme:hasDRG ?drg).[(?clm01 + ?drg) + int(1)] -> (?clm01 rdf:type acme:SpecialClaim).(?clm01 xyz ?drg);"
    },
    {
      "name": "Rule2",
      "properties": {
        "s": "100",
        "o": "true",
        "tag": "\"USI\""
      },
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:Claim"
            }
          ],
          "normalizedLabel": "(?x1 rdf:type acme:Claim)",
          "label": "(?clm01 rdf:type acme:Claim)"
        },
        {
          "type": "antecedent",
          "isNot": true,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:hasDRG"
            },
            {
              "type": "var",
              "id": "?x2",
              "label": "?drg"
            }
          ],
          "filter": {
            "type": "binary",
            "lhs": {
              "type": "keyword",
              "value": "true"
            },
            "op": "and",
            "rhs": {
              "type": "keyword",
              "value": "false"
            }
          },
          "normalizedLabel": "not(?x1 acme:hasDRG ?x2).[true and false]",
          "label": "not(?clm01 acme:hasDRG ?drg).[true and false]"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:SpecialClaim"
            }
          ],
          "normalizedLabel": "(?x1 rdf:type acme:SpecialClaim)",
          "label": "(?clm01 rdf:type acme:SpecialClaim)"
        }
      ],
      "normalizedLabel": "[Rule2, s=100, o=true, tag=\"USI\"]:(?x1 rdf:type acme:Claim).not(?x1 acme:hasDRG ?x2).[true and false] -> (?x1 rdf:type acme:SpecialClaim);",
      "label": "[Rule2, s=100, o=true, tag=\"USI\"]:(?clm01 rdf:type acme:Claim).not(?clm01 acme:hasDRG ?drg).[true and false] -> (?clm01 rdf:type acme:SpecialClaim);"
    },
    {
      "name": "Rule3",
      "properties": {},
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:Claim"
            }
          ],
          "filter": {
            "type": "binary",
            "lhs": {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x2",
                "label": "?a1"
              },
              "op": "+",
              "rhs": {
                "type": "identifier",
                "value": "b1"
              }
            },
            "op": "*",
            "rhs": {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x3",
                "label": "?a2"
              },
              "op": "+",
              "rhs": {
                "type": "identifier",
                "value": "b2"
              }
            }
          },
          "normalizedLabel": "(?x1 rdf:type acme:Claim).[(?x2 + b1) * (?x3 + b2)]",
          "label": "(?clm01 rdf:type acme:Claim).[(?a1 + b1) * (?a2 + b2)]"
        },
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:Claim"
            }
          ],
          "filter": {
            "type": "binary",
            "lhs": {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x2",
                "label": "?a1"
              },
              "op": "or",
              "rhs": {
                "type": "identifier",
                "value": "b1"
              }
            },
            "op": "and",
            "rhs": {
              "type": "var",
              "id": "?x3",
              "label": "?a2"
            }
          },
          "normalizedLabel": "(?x1 rdf:type acme:Claim).[(?x2 or b1) and ?x3]",
          "label": "(?clm01 rdf:type acme:Claim).[(?a1 or b1) and ?a2]"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:SpecialClaim"
            }
          ],
          "normalizedLabel": "(?x1 rdf:type acme:SpecialClaim)",
          "label": "(?clm01 rdf:type acme:SpecialClaim)"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x4",
              "label": "?clm02"
            },
            {
              "type": "identifier",
              "value": "rdf:type"
            },
            {
              "type": "identifier",
              "value": "acme:SpecialClaim"
            }
          ],
          "normalizedLabel": "(?x4 rdf:type acme:SpecialClaim)",
          "label": "(?clm02 rdf:type acme:SpecialClaim)"
        }
      ],
      "normalizedLabel": "[Rule3]:(?x1 rdf:type acme:Claim).[(?x2 + b1) * (?x3 + b2)].(?x1 rdf:type acme:Claim).[(?x2 or b1) and ?x3] -> (?x1 rdf:type acme:SpecialClaim).(?x4 rdf:type acme:SpecialClaim);",
      "label": "[Rule3]:(?clm01 rdf:type acme:Claim).[(?a1 + b1) * (?a2 + b2)].(?clm01 rdf:type acme:Claim).[(?a1 or b1) and ?a2] -> (?clm01 rdf:type acme:SpecialClaim).(?clm02 rdf:type acme:SpecialClaim);"
    },
    {
      "name": "Rule4",
      "properties": {},
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_code"
            },
            {
              "type": "var",
              "id": "?x2",
              "label": "?code"
            }
          ],
          "filter": {
            "type": "binary",
            "lhs": {
              "type": "unary",
              "op": "not",
              "arg": {
                "type": "binary",
                "lhs": {
                  "type": "var",
                  "id": "?x3",
                  "label": "?a1"
                },
                "op": "or",
                "rhs": {
                  "type": "identifier",
                  "value": "b1"
                }
              }
            },
            "op": "and",
            "rhs": {
              "type": "unary",
              "op": "not",
              "arg": {
                "type": "var",
                "id": "?x4",
                "label": "?a2"
              }
            }
          },
          "normalizedLabel": "(?x1 has_code ?x2).[(not (?x3 or b1)) and (not ?x4)]",
          "label": "(?clm01 has_code ?code).[(not (?a1 or b1)) and (not ?a2)]"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "value"
            },
            {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x3",
                "label": "?a1"
              },
              "op": "+",
              "rhs": {
                "type": "var",
                "id": "?x5",
                "label": "?b2"
              }
            }
          ],
          "normalizedLabel": "(?x1 value ?x3 + ?x5)",
          "label": "(?clm01 value ?a1 + ?b2)"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "value2"
            },
            {
              "type": "binary",
              "lhs": {
                "type": "var",
                "id": "?x3",
                "label": "?a1"
              },
              "op": "+",
              "rhs": {
                "type": "var",
                "id": "?x5",
                "label": "?b2"
              }
            }
          ],
          "normalizedLabel": "(?x1 value2 ?x3 + ?x5)",
          "label": "(?clm01 value2 ?a1 + ?b2)"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "value2"
            },
            {
              "type": "unary",
              "op": "not",
              "arg": {
                "type": "var",
                "id": "?x5",
                "label": "?b2"
              }
            }
          ],
          "normalizedLabel": "(?x1 value2 not ?x5)",
          "label": "(?clm01 value2 not ?b2)"
        }
      ],
      "normalizedLabel": "[Rule4]:(?x1 has_code ?x2).[(not (?x3 or b1)) and (not ?x4)] -> (?x1 value ?x3 + ?x5).(?x1 value2 ?x3 + ?x5).(?x1 value2 not ?x5);",
      "label": "[Rule4]:(?clm01 has_code ?code).[(not (?a1 or b1)) and (not ?a2)] -> (?clm01 value ?a1 + ?b2).(?clm01 value2 ?a1 + ?b2).(?clm01 value2 not ?b2);"
    },
    {
      "name": "Rule5",
      "properties": {},
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_code"
            },
            {
              "type": "var",
              "id": "?x2",
              "label": "?code"
            }
          ],
          "normalizedLabel": "(?x1 has_code ?x2)",
          "label": "(?clm01 has_code ?code)"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:lookup_table"
            },
            {
              "type": "keyword",
              "value": "true"
            }
          ],
          "normalizedLabel": "(?x1 acme:\"lookup_table\" true)",
          "label": "(?clm01 acme:\"lookup_table\" true)"
        }
      ],
      "normalizedLabel": "[Rule5]:(?x1 has_code ?x2) -> (?x1 acme:\"lookup_table\" true);",
      "label": "[Rule5]:(?clm01 has_code ?code) -> (?clm01 acme:\"lookup_table\" true);"
    },
    {
      "name": "Rule6",
      "properties": {},
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_code"
            },
            {
              "type": "identifier",
              "value": "r1"
            }
          ],
          "normalizedLabel": "(?x1 has_code r1)",
          "label": "(?clm01 has_code r1)"
        },
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_str"
            },
            {
              "type": "identifier",
              "value": "r2"
            }
          ],
          "normalizedLabel": "(?x1 has_str r2)",
          "label": "(?clm01 has_str r2)"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:lookup_table"
            },
            {
              "type": "text",
              "id": "valueX"
            }
          ],
          "normalizedLabel": "(?x1 acme:\"lookup_table\" \"valueX\")",
          "label": "(?clm01 acme:\"lookup_table\" \"valueX\")"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:market"
            },
            {
              "type": "text",
              "id": "MERGED \"MARKET\" CHARGE BACK"
            }
          ],
          "normalizedLabel": "(?x1 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\")",
          "label": "(?clm01 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\")"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:market"
            },
            {
              "type": "text",
              "id": "MERGED \"MARKET\" CHARGE BACK"
            }
          ],
          "normalizedLabel": "(?x1 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\")",
          "label": "(?clm01 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\")"
        }
      ],
      "normalizedLabel": "[Rule6]:(?x1 has_code r1).(?x1 has_str r2) -> (?x1 acme:\"lookup_table\" \"valueX\").(?x1 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\").(?x1 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\");",
      "label": "[Rule6]:(?clm01 has_code r1).(?clm01 has_str r2) -> (?clm01 acme:\"lookup_table\" \"valueX\").(?clm01 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\").(?clm01 acme:market \"MERGED \\\"MARKET\\\" CHARGE BACK\");"
    },
    {
      "name": "Rule7",
      "properties": {},
      "antecedents": [
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_code"
            },
            {
              "type": "int",
              "value": "1"
            }
          ],
          "normalizedLabel": "(?x1 has_code int(1))",
          "label": "(?clm01 has_code int(1))"
        },
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_str"
            },
            {
              "type": "text",
              "id": "value"
            }
          ],
          "normalizedLabel": "(?x1 has_str \"value\")",
          "label": "(?clm01 has_str \"value\")"
        },
        {
          "type": "antecedent",
          "isNot": false,
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "hasTrue"
            },
            {
              "type": "keyword",
              "value": "true"
            }
          ],
          "normalizedLabel": "(?x1 hasTrue true)",
          "label": "(?clm01 hasTrue true)"
        }
      ],
      "consequents": [
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "acme:lookup_table"
            },
            {
              "type": "keyword",
              "value": "true"
            }
          ],
          "normalizedLabel": "(?x1 acme:\"lookup_table\" true)",
          "label": "(?clm01 acme:\"lookup_table\" true)"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_literal"
            },
            {
              "type": "int",
              "value": "1"
            }
          ],
          "normalizedLabel": "(?x1 has_literal int(1))",
          "label": "(?clm01 has_literal int(1))"
        },
        {
          "type": "consequent",
          "triple": [
            {
              "type": "var",
              "id": "?x1",
              "label": "?clm01"
            },
            {
              "type": "identifier",
              "value": "has_expr"
            },
            {
              "type": "binary",
              "lhs": {
                "type": "int",
                "value": "1"
              },
              "op": "+",
              "rhs": {
                "type": "long",
                "value": "4"
              }
            }
          ],
          "normalizedLabel": "(?x1 has_expr int(1) + long(4))",
          "label": "(?clm01 has_expr int(1) + long(4))"
        }
      ],
      "normalizedLabel": "[Rule7]:(?x1 has_code int(1)).(?x1 has_str \"value\").(?x1 hasTrue true) -> (?x1 acme:\"lookup_table\" true).(?x1 has_literal int(1)).(?x1 has_expr int(1) + long(4));",
      "label": "[Rule7]:(?clm01 has_code int(1)).(?clm01 has_str \"value\").(?clm01 hasTrue true) -> (?clm01 acme:\"lookup_table\" true).(?clm01 has_literal int(1)).(?clm01 has_expr int(1) + long(4));"
    }
  ]
}