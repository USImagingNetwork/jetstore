import 'package:flutter/material.dart';
import 'package:flutter_typeahead/flutter_typeahead.dart';
import 'package:jetsclient/components/jets_form_state.dart';
import 'package:jetsclient/models/form_config.dart';
import 'package:jetsclient/routes/export_routes.dart';

class JetsTypeaheadFormField extends StatelessWidget {
  const JetsTypeaheadFormField({
    required super.key,
    required this.formFieldConfig,
    required this.onChanged,
    required this.formValidator,
    required this.formState,
  });
  final FormTypeaheadFieldConfig formFieldConfig;
  final void Function(String?) onChanged;
  final JetsFormFieldValidator formValidator;
  final JetsFormState formState;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      flex: formFieldConfig.flex,
      child: Padding(
        padding: const EdgeInsets.fromLTRB(16.0, 0.0, 16.0, 0.0),
      //   child: DropdownButtonFormField<String>(
      //       value: formState.getValue(group, key),
      //       onChanged: (String? newValue) {
      //         formState.setValue(formFieldConfig.group, formFieldConfig.key, newValue);
      //         onChanged(newValue);
      //       },
      //       autovalidateMode: formFieldConfig.autovalidateMode,
      //       validator: (p0) =>
      //           formValidator(formFieldConfig.group, formFieldConfig.key, p0),
      //       items: formState.getCacheValue(formFieldConfig.dropdownMenuItemCacheKey),
      // ),
      child: TypeAheadField<String>(
                controller: controller,
                builder: (context, controller, focusNode) => TextField(
                  controller: controller,
                  focusNode: focusNode,
                  autofocus: true,
                  style: DefaultTextStyle.of(context)
                      .style
                      .copyWith(fontStyle: FontStyle.italic),
                  decoration: InputDecoration(
                    border: const OutlineInputBorder(),
                    hintText: hintText,
                  ),
                ),
                decorationBuilder: (context, child) => Material(
                  type: MaterialType.card,
                  elevation: 4,
                  borderRadius: borderRadius,
                  child: child,
                ),
                itemBuilder: (context, product) => ListTile(
                  title: Text(product.name),
                  subtitle: product.description != null
                      ? Text(
                          '${product.description!} - \$${product.price}',
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        )
                      : Text('\$${product.price}'),
                ),
                debounceDuration: debounceDuration,
                hideOnSelect: settings.hideOnSelect.value,
                hideOnUnfocus: settings.hideOnUnfocus.value,
                hideWithKeyboard: settings.hideOnUnfocus.value,
                retainOnLoading: settings.retainOnLoading.value,
                onSelected: onSuggestionSelected,
                suggestionsCallback: suggestionsCallback,
                itemSeparatorBuilder: itemSeparatorBuilder,
                listBuilder:
                    settings.gridLayout.value ? gridLayoutBuilder : null,
              ),
    ));
  }
}
