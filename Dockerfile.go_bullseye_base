ARG BASE_CONTAINER=golang:1.21-bullseye
FROM ${BASE_CONTAINER} as builder
ARG BASE_CONTAINER

# Taken from https://dev.to/karanpratapsingh/dockerize-your-go-app-46pp

# Fix DL4006
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER root

ENV DEBIAN_FRONTEND noninteractive

# # Add postgres repo for server dev
# RUN apt install postgresql-common \
#      && sh /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh -s

RUN \
    apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common python3-software-properties \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    automake \
    bison \
    build-essential \
    cmake \
    curl \
    flex \
    fonts-droid-fallback \
    gcc \
    git \
    gnupg \
    less \
    libboost-all-dev \
    # libevent-dev \
    lib32stdc++6 \
    libgconf-2-4 \
    libglu1-mesa \
    libjemalloc-dev \
    libpq-dev \
    libstdc++6 \
    libssl-dev \
    libtool \
    make \
    # miller \
    pkg-config \
    # postgresql-$PG_MAJOR \
    # postgresql-plpython3-$PG_MAJOR \
    # postgresql-server-dev-$PG_MAJOR \
    python3-dev \
    python3-pip \
    python3-setuptools \
    sed \
    unzip \
    wget \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN dpkg -l

# Cloning Flutter repo to build the ui for use in DEV MODE
# Clone the flutter repo
RUN git clone https://github.com/flutter/flutter.git /usr/local/flutter

# # Set flutter path
ENV PATH="${PATH}:/usr/local/flutter/bin:/usr/local/flutter/bin/cache/dart-sdk/bin"

# # Run flutter doctor
RUN flutter doctor -v
RUN flutter channel master
RUN flutter upgrade

# ARG PQXX_VERSION="7.6.0"
# ENV PQXX_VERSION=${PQXX_VERSION}

# RUN wget -q "https://github.com/jtv/libpqxx/archive/refs/tags/${PQXX_VERSION}.tar.gz"  \
#     && tar xf "${PQXX_VERSION}.tar.gz"  \
#     && cd "libpqxx-${PQXX_VERSION}"  \
#     && ./configure   \
#     && make -j6  \
#     && make install \
#     && ldconfig

ENV EXTERNALS /externals
RUN mkdir -p ${EXTERNALS}
WORKDIR ${EXTERNALS}

ARG SQLITE3_VERSION="3430200"
ENV SQLITE3_VERSION=${SQLITE3_VERSION}

RUN wget -q "https://www.sqlite.org/2023/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && tar xf "sqlite-autoconf-${SQLITE3_VERSION}.tar.gz"  \
    && cd "sqlite-autoconf-${SQLITE3_VERSION}"  \
    && ./configure   \
    && make -j6  \
    && make install \
    && ldconfig

RUN sqlite3 --version

# Abseil
RUN wget -q "https://github.com/abseil/abseil-cpp/archive/5a7fca7de1a0285a0887030a346d886b8978a03c.zip"  \
    && unzip "5a7fca7de1a0285a0887030a346d886b8978a03c.zip"  \
    && cd "abseil-cpp-5a7fca7de1a0285a0887030a346d886b8978a03c"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DABSL_BUILD_TESTING=OFF -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Test
ARG GOOGLETEST_PATH="${EXTERNALS}/googletest-2dd1c131950043a8ad5ab0d2dda0e0970596586a"
RUN wget -q "https://github.com/google/googletest/archive/2dd1c131950043a8ad5ab0d2dda0e0970596586a.zip"  \
    && unzip "2dd1c131950043a8ad5ab0d2dda0e0970596586a.zip"  \
    && cd "googletest-2dd1c131950043a8ad5ab0d2dda0e0970596586a"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Flags
RUN wget -q "https://github.com/gflags/gflags/archive/a738fdf9338412f83ab3f26f31ac11ed3f3ec4bd.zip"  \
    && unzip "a738fdf9338412f83ab3f26f31ac11ed3f3ec4bd.zip"  \
    && cd "gflags-a738fdf9338412f83ab3f26f31ac11ed3f3ec4bd"  \
    && mkdir build && cd build \
    && cmake cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Log
RUN wget -q "https://github.com/google/glog/archive/d153e294b8c44a1806fdfb523c4fe556ed537581.zip"  \
    && unzip "d153e294b8c44a1806fdfb523c4fe556ed537581.zip"  \
    && cd "glog-d153e294b8c44a1806fdfb523c4fe556ed537581"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 .. \
    && make -j6  \
    && make install \
    && ldconfig

# Google Benchmark
RUN wget -q "https://github.com/google/benchmark/archive/ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd.zip"  \
    && unzip "ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd.zip"  \
    && cd "benchmark-ca8d0f7b613ac915cd6b161ab01b7be449d1e1cd"  \
    && mkdir build && cd build \
    && cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_CXX_STANDARD=20 -DGOOGLETEST_PATH=${GOOGLETEST_PATH} .. \
    && make -j6  \
    && make install \
    && ldconfig
